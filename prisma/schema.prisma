// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // Keep your custom output path
  output   = "../lib/generated/prisma" 
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -----------------------------------------------------------
// 1. ORIGINAL USER MODEL (KEPT AS IS)
// -----------------------------------------------------------
model User {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  
  // Link to the Account model
  account Account?

  @@map("users")
}


// -----------------------------------------------------------
// 2. NEW ACCOUNT MODEL (BRIDGE TO CLERK)
// -----------------------------------------------------------
model Account {
  id        Int      @id @default(autoincrement())
  
  // The unique ID provided by Clerk (user_2erN...)
  clerkId   String   @unique 
  // Add email from the Clerk webhook to make debugging easier
  email     String? 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign key linking back to the internal User model
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  
  // Relationship to the Connection model
  connections Connection[]

  @@map("accounts")
}


// -----------------------------------------------------------
// ENUM: Defines the set of supported platforms
// -----------------------------------------------------------
enum PlatformType {
  SHOPIFY
  META_ADS
  GOOGLE_ADS
  GA4 // Google Analytics 4
}


// -----------------------------------------------------------
// 3. CONNECTION MODEL (Stores External Platform Tokens)
// -----------------------------------------------------------
model Connection {
  // Switched to Int ID for better indexing performance, though UUID is fine too.
  id                 Int            @id @default(autoincrement()) 
  platform           PlatformType
  
  // Generic OAuth Fields
  accessToken        String         // The permanent OAuth access token (MUST BE ENCRYPTED IN PRODUCTION)
  scope              String?
  
  // Platform-Specific Identifier Fields
  shopDomain         String?        // <-- CRITICAL: Made optional for non-Shopify
  platformIdentifier String         // <-- CRITICAL: Made NON-optional (or required) for non-Shopify to rely on.
  platformData       Json?          // Flexible field for other unique data
  
  lastUpdated        DateTime       @updatedAt
  
  // Foreign key linking back to the Account model (which is linked to the Clerk ID)
  accountId          Int
  account            Account        @relation(fields: [accountId], references: [id])
  
  // === MODIFIED UNIQUE CONSTRAINTS ===
  // 1. For Shopify: Unique on Account, Platform, and Shop Domain. platformIdentifier is redundant here.
  @@unique([accountId, platform, shopDomain]) 
  
  // 2. For Ads/GA4: Unique on Account, Platform, and Platform Identifier (e.g., Ad Account ID/Refresh Token).
  // Note: Since shopDomain is often null here, this constraint manages the non-Shopify links.
  @@unique([accountId, platform, platformIdentifier])

  @@map("connections")
}